using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using MclApp.Core.Domain;
using MclApp.Data.Repository;
using Microsoft.EntityFrameworkCore;

namespace MclApp.Services.CyberVulnerabilityServices
{
    public class CyberVulnerabilityService : ICyberVulnerabilityService
    {
        private readonly IDbRepositoryPattern<CyberVulnerability> _cyberVulnerabilityRepository;

        public CyberVulnerabilityService(IDbRepositoryPattern<CyberVulnerability> cyberVulnerabilityRepository)
        {
            _cyberVulnerabilityRepository = cyberVulnerabilityRepository;
        }
        public async Task<List<CyberVulnerability>> GetCyberVulnerabilityForUser(Guid userId)
        {
            return await _cyberVulnerabilityRepository.Table.Where(x => x.UserId == userId).ToListAsync();
        }

        public async Task<double> SumCyberVulnerabilityScoreForUser(Guid userId)
        {
            var userData = _cyberVulnerabilityRepository.Table.Where(x => x.UserId == userId);
            return await userData.SumAsync(y => y.Score);
        }
        public async Task<double> GetCurrentCyberScore(Guid userId)
        {
            var allVulnerabilitiesForUser = await GetCyberVulnerabilityForUser(userId);
            var totalScore = allVulnerabilitiesForUser.Sum(x => x.Score);
            var high = allVulnerabilitiesForUser.Where(x => x.Risk == VulnerabilityRisk.High).Sum(x => x.Score) * 2;
            var medium = allVulnerabilitiesForUser.Where(x => x.Risk == VulnerabilityRisk.Medium).Sum(x => x.Score) * 1.5;
            var low = allVulnerabilitiesForUser.Where(x => x.Risk == VulnerabilityRisk.Low).Sum(x => x.Score) * 0.8;
            var sumAfterMultiplication = high + medium + low;

            return totalScore / sumAfterMultiplication;
        }
    }
}
